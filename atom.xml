<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>blog.hacking.icu</id>
    <title>苏近之的博客</title>
    <updated>2022-06-20T10:22:29.061Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="blog.hacking.icu"/>
    <link rel="self" href="blog.hacking.icu/atom.xml"/>
    <subtitle>在图像里寻找自我，在代码里发现自由。</subtitle>
    <logo>https://files.dev-test.cn/favicon.ico</logo>
    <icon>https://files.dev-test.cn/favicon.ico</icon>
    <rights>All rights reserved 2022, 苏近之的博客</rights>
    <entry>
        <title type="html"><![CDATA[评论唐山女孩被打事件]]></title>
        <id>https://blog.hacking.icu/tangshan-gril-was-beaten-event</id>
        <link href="https://blog.hacking.icu/tangshan-gril-was-beaten-event"/>
        <updated>2022-06-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[提到唐山，我们想到的可能是那场二十多万人失去生命的大地震。但地震多半是说自然之数，非人力所能完全掌控的。
而最近发生在唐山的女孩被打事件，并不是巧合、也不是意外、无关风雨雷电，是唐山以及国内众多的三四线城市安全治理失败的写照。发生这样的事情...]]></summary>
        <content type="html"><![CDATA[<p>提到唐山，我们想到的可能是那场二十多万人失去生命的大地震。但地震多半是说自然之数，非人力所能完全掌控的。</p>
<p>而最近发生在唐山的女孩被打事件，并不是巧合、也不是意外、无关风雨雷电，是唐山以及国内众多的三四线城市安全治理失败的写照。发生这样的事情是必然的，只是在这个时候引起轰动是偶然的。</p>
<p>除去北上广深等少数的一线或者准一线城市，在城市的治理上是相对进步的，明面上确实能够保障大部分安分守己的百姓的人身安全。但这也只是明面上，暗地里有多少不为人知的悲剧在频繁上演呢？特别是涉及到官和权的时候、涉及到群体事件的时候、涉及到敏感点的时候。总的来说，这些大型城市起码在表面上是展示了法制的一面的。实际上，人治的思维仍然广泛指引具体的行动，可以参考上海两个月封城中城市的管理者所表现的令人感到窒息的一面。</p>
<p>但是三四百个城市中，除了个别城市外，大部分城市乡镇的治理其实都是人治思维、关系思维、权利思维。大的地方比小的地方表明功夫做的要好一些、到了小城市、乡镇农村，就更是天高皇帝远。想要公平正义，真的是比登天还难。在城市里，我们可以说治理更多的是维稳。但是到了小地方，所谓的治理就成了维护权利和利益。利用手头的权利和利益再强制打压公民社会，维系所谓“太平盛世”般都稳定。衙门的门东南西北都无所谓、有钱有权有关系都可以进进出出、反之莫要进来，进来就莫想出去。</p>
<p>在事情发生前不久，唐山还召开了反黑除恶的会议。而这件事之后，各种实名举报如同雨后春笋般冒出来、可见这样一个小城市、百姓生计之艰难、甚至人生安全都得不到保障。那么试问，这些出席反黑除恶会议的官员们？你们在会议上说些什么？喊口号还是歌功颂德呢？会议之后你们又去了哪里？洗脚按摩还是酒吧餐桌呢？这些年的反黑除恶，是不是都像唐山这样呢？形象工程、运动式整风、会上照本宣科、会后原形毕露。说得难听点，这些做官的很多本就是为恶一方之人，让这群人去除恶？可能吗？</p>
<p>我们的党从农村包围成熟，打跑几百万兵力的国民党，那是凭借子弹和大炮。但是城市的治理，靠的是什么？是轻车熟路的人际关系、贪污腐败吗？还是口号中的依法治国。为什么开赌场的人可以名车代步、尾号四个七，而安分守己的百姓吃个饭要遭受无妄之灾、最后不得不靠网络才幸运的收到关注？诚然，每个国家、每个政党、每个地方都会存在安全治理中难以触及的灰暗地带，就算是美国大规模的枪击、黑道之间的火拼也严重威胁普通百姓的生存。但是，我们这并不是个案，而是普遍存在的问题、腐败、官商勾结、涉黑这些都甚至已经深入到了政府部门的深处，就像是白蚁一样腐蚀中国政府这个实际上最庞大的组织、也腐蚀人们对政府的信心。信心的建立需要花十几年甚至几十年的时间，但是信心的崩塌只需要一件事、两个月、三座城市、八九个人罢了。治理何止是失败呢！</p>
<p>最近发生的事情、从郑州的暴雨到西安的混乱疫情治理，从上海的两月封城到唐山的涉黑打女人……无不在网络或者现实中震撼了无数的平凡人，我们这些人更容易把自己带入这些场景中去。这一幕幕让我们联想到自己，努力赚取更好的生活、所以奋斗得到的，包括我们的人身安全、我们的财产、我们的尊严，在极端的疫情管控中、在日常的街头吃饭中、都可能随时化作泡影，怎么能不让我们思之极恐、痛心疾首！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宿命]]></title>
        <id>https://blog.hacking.icu/destiny</id>
        <link href="https://blog.hacking.icu/destiny"/>
        <updated>2022-06-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[你在等待什么
雨水滋润韭菜
还是说等待着
收割一波韭菜
]]></summary>
        <content type="html"><![CDATA[<p>你在等待什么<br>
雨水滋润韭菜<br>
还是说等待着<br>
收割一波韭菜</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[种子和流星]]></title>
        <id>https://blog.hacking.icu/seeds_and_meteors</id>
        <link href="https://blog.hacking.icu/seeds_and_meteors"/>
        <updated>2022-06-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[春种秋收的种子，
无法欣赏流星留下的绚丽。
而转瞬即逝的流星，
读不懂漫长岁月中的宽容。
]]></summary>
        <content type="html"><![CDATA[<p>春种秋收的种子，</p>
<p>无法欣赏流星留下的绚丽。</p>
<p>而转瞬即逝的流星，</p>
<p>读不懂漫长岁月中的宽容。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[想你]]></title>
        <id>https://blog.hacking.icu/miss_you</id>
        <link href="https://blog.hacking.icu/miss_you"/>
        <updated>2022-06-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[昨天下了一场雨
过些天就会忘记
雨是那么得无足轻重
眼下你已经离开许久
想起你泪如雨下
]]></summary>
        <content type="html"><![CDATA[<p>昨天下了一场雨</p>
<p>过些天就会忘记</p>
<p>雨是那么得无足轻重</p>
<p>眼下你已经离开许久</p>
<p>想起你泪如雨下</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[钻石和鹅软石]]></title>
        <id>https://blog.hacking.icu/diamonds_and_cobblestones</id>
        <link href="https://blog.hacking.icu/diamonds_and_cobblestones"/>
        <updated>2022-06-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[钻石碰上了鹅卵石，
钻石说我比你硬，
鹅软石说我无所谓。
最硬的东西也最软。
]]></summary>
        <content type="html"><![CDATA[<p>钻石碰上了鹅卵石，</p>
<p>钻石说我比你硬，</p>
<p>鹅软石说我无所谓。</p>
<p>最硬的东西也最软。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[垃圾袋和垃圾桶]]></title>
        <id>https://blog.hacking.icu/garbage_bags_and_trash_cans</id>
        <link href="https://blog.hacking.icu/garbage_bags_and_trash_cans"/>
        <updated>2022-06-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[你给了我一个垃圾袋，
我想把你装进去。
你说你想去浪荡，
来我这里吧，我做你的垃圾桶。
]]></summary>
        <content type="html"><![CDATA[<p>你给了我一个垃圾袋，</p>
<p>我想把你装进去。</p>
<p>你说你想去浪荡，</p>
<p>来我这里吧，我做你的垃圾桶。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从诗篇到墓志铭]]></title>
        <id>https://blog.hacking.icu/from_psalms_to_epitaphs</id>
        <link href="https://blog.hacking.icu/from_psalms_to_epitaphs"/>
        <updated>2022-05-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[曾想把生活写作美丽诗篇
也曾想做个无所畏惧的人
生活杂乱无章梦止步不前
就地把生活写作了墓志铭
]]></summary>
        <content type="html"><![CDATA[<p>曾想把生活写作美丽诗篇</p>
<p>也曾想做个无所畏惧的人</p>
<p>生活杂乱无章梦止步不前</p>
<p>就地把生活写作了墓志铭</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黛玉的香囊]]></title>
        <id>https://blog.hacking.icu/lin_daiyu_and_sachet</id>
        <link href="https://blog.hacking.icu/lin_daiyu_and_sachet"/>
        <updated>2022-05-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[宝玉跟随着父亲游大观园，得到了父亲罕见的赞许。底下的家奴见了纷纷向宝玉讨赏。他们的目光集中在了宝玉身上的各种挂饰，一抢而光。到了外面，说是贾府的公子戴的，卖个好价钱。
袭人一见宝玉身上荷包皆无，生气骂道：又给那些不要脸的抢光了。黛玉见到此景...]]></summary>
        <content type="html"><![CDATA[<p>宝玉跟随着父亲游大观园，得到了父亲罕见的赞许。底下的家奴见了纷纷向宝玉讨赏。他们的目光集中在了宝玉身上的各种挂饰，一抢而光。到了外面，说是贾府的公子戴的，卖个好价钱。</p>
<p>袭人一见宝玉身上荷包皆无，生气骂道：又给那些不要脸的抢光了。黛玉见到此景，也生了气，气得剪掉了手中正在绣的荷包。就气这个宝玉把自己给他的香囊也给人抢去。</p>
<p>只见宝玉从衣服内掏出香囊来，说到：我什么时候把你给我的东西给别人？黛玉，哭。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[知了和屎壳郎]]></title>
        <id>https://blog.hacking.icu/cicadas_and_dung_beetles</id>
        <link href="https://blog.hacking.icu/cicadas_and_dung_beetles"/>
        <updated>2022-05-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[知了操控了举世舆论
屎壳郎冲上道德高地
你们我们被当作蝼蚁
被糖衣包裹在弹丸里
炮火覆盖金黄的稻田
火光照亮他自私的脸
]]></summary>
        <content type="html"><![CDATA[<p>知了操控了举世舆论<br>
屎壳郎冲上道德高地<br>
你们我们被当作蝼蚁<br>
被糖衣包裹在弹丸里<br>
炮火覆盖金黄的稻田<br>
火光照亮他自私的脸</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CPU核数、并发数以及性能的关系]]></title>
        <id>https://blog.hacking.icu/cpu_concurrency_performance</id>
        <link href="https://blog.hacking.icu/cpu_concurrency_performance"/>
        <updated>2022-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[这篇文档描述了 CPU 核心数量、并发数量以及性能的关系。主要有统筹方法以及阿尔达姆定律。
统筹方法
我国著名的数学家华罗庚使用泡茶的例子来说明统筹法，如下图所示:
)
很明显使用统筹法，有相互依赖关系的部分使用串行，而没有相互依赖关系的部...]]></summary>
        <content type="html"><![CDATA[<p>这篇文档描述了 CPU 核心数量、并发数量以及性能的关系。主要有统筹方法以及阿尔达姆定律。</p>
<h3 id="统筹方法">统筹方法</h3>
<p>我国著名的数学家华罗庚使用泡茶的例子来说明统筹法，如下图所示:</p>
<p><img src="https://static.gridea.dev/294376244890305033/pLQJECPhI.jpg" alt="" loading="lazy">)</p>
<p>很明显使用统筹法，有相互依赖关系的部分使用串行，而没有相互依赖关系的部分使用并行，这样统筹安排节省了时间，提升了效率。使用统筹法对我们的程序并行计算是有很好的指导作用的。</p>
<h3 id="阿姆达尔定律amdahls-law">阿姆达尔定律(Amdahl's Law)</h3>
<p>这个定律是计算机界的一个经验法则，它代表了处理器并行运算后效率的提升能力。理论最大加速比是通过下面这个公式计算而来的:</p>
<p><img src="https://static.gridea.dev/294376244890305033/US4SadN_q.png" alt="" loading="lazy"></p>
<p>这个公式中各个元素的含义如下:</p>
<p>● N : 处理核心数的数量<br>
● P：可以加速时间占比</p>
<p>我们来写一个程序来举例:</p>
<pre><code class="language-python">import time
from concurrent.futures import ProcessPoolExecutor

def _task():
    time.sleep(1)

if __name__ == '__main__':
    start = time.time()
    for _ in range(10):
        _task()
    end = time.time()
    print('took: {}'.format(end - start))
    pool = ProcessPoolExecutor(10)
    start = time.time()
    futures = []
    for _ in range(10):
        future = pool.submit(_task)
        futures.append(future)
    for future in futures:
        future.result()
    end = time.time()
    print('took: {}'.format(end - start))
</code></pre>
<p>运行程序之后，我们得到了使用并行优化前后的时间占比，P 的计算如下:</p>
<pre><code>P = 1.1267099380493164 /  10.02167558670044  ~= 0.1124
</code></pre>
<p>然后我们将 P 代入到公式中去，就得到了最大优化占比，如下:</p>
<pre><code>S(10)  =  1 / ((1 - 0.112427) + 0.112427 / 10) ~= 1.1125
</code></pre>
<p>我们看到最大优化占比和我们的实际优化占比是非常接近的。如果我们不断的加大这个公式中的 N 的数值，就会得到一个曲线，发现 N 的数量并不是越大越好的。如下图所示:</p>
<h3 id="总结">总结</h3>
<p>通过上面的分析，我们知道并不是线程数量越多，效率就越高的。线程的数量和 CPU 核心数量是有关系的，一般我们会采用下面的经验值:</p>
<p>● CPU 密集性的程序，我们采用 N + 1<br>
● IO 密集性的程序，我们采用 2N + 1</p>
<p>线程过多，会引起线程之间去竞争 CPU 资源，会抵消一部分的优化效率。另外，线程过多会有上下文频繁的切换，这也是需要我们去考虑的成本。</p>
]]></content>
    </entry>
</feed>